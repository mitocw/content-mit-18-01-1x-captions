#
# File:   content-mit-18-01-1x-captions/U4S3 Making a Box [NYREkA-W5OA].txt
#
# Captions for MITx 18.01.1x module
#
# This file has 49 caption lines.
#
# Do not add or delete any lines.  If there is text missing at the end, please add it to the last line.
#
#----------------------------------------

Let's say we have an 8 foot by 12 foot piece of cardboard,
and we're going to make it into a box
by cutting out squares from each corner, like so.
Once we've done that, we're going to fold up
each of these four flaps.
And we're going to tape them together, and we'll have a box.
There's no top to the box, and it might not
be the sturdiest thing in the world, but it'll work for now.
The question is, what's the biggest volume that we
can obtain using this method?

First let's take a moment and think about why this
is an interesting question.
It's because there are trade-offs involved.
If we cut very tiny squares out of the corners
of the cardboard, then our box is
going to be really wide but incredibly short.
And that's not a very large volume.
But if we cut out really large squares out of the corners,
then the box becomes really skinny,
and that's no good either.
The sweet spot has to be somewhere in the middle.

OK.
This is an optimization problem because we're
trying to maximize the volume, and the volume, v,
is just given by length x width x height.
It's a box.
You may look at that and say, whoa.
That's three variables there-- length, width, height.
How am I going to keep track of all them?
But the good news is that these aren't
independent of one another.
Everything here is determined just by a single quantity.
It's determined by how big we cut these squares out
of the corners.
Once you know that, you know everything.
So if we just call the side of this square x,
then everything can be written as a function
of that single variable, x.
And that's good because multi-variable calculus
is a whole other course.
What we want you to do now is actually
find what v is in terms of x exactly,
and then determine what interval we're
trying to optimize over, and then do it.
We'll talk afterwards.
